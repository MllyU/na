<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- 引入jdbc文件 -->
	<bean id="propertyPlaceholderConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:jdbc.properties"></property>
	</bean>
	<!-- 数据源 c3p0连接池，Druid连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<!-- 四个必有属性 -->
		<property name="driverClassName" value="${driver}"></property>
		<property name="url" value="${url}"></property>
		<property name="username" value="${username}"></property>
		<property name="password" value="${password}"></property>
		<!--连接池配置 -->
		<!--初始化时建立物理连接的个数 -->
		<property name="initialSize" value="8"></property>
		<!--最大连接数 -->
		<property name="maxActive" value="20"></property>
		<!--最大闲置数量 弃置属性 -->
		<property name="maxIdle" value="12"></property>
		<!-- 最大等待时间 -->
		<property name="maxWait" value="10000"></property>
		<!-- 检测连接是否有效 -->
		<property name="validationQuery" value="select 1 from dual"></property>
		<!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 -->
		<property name="testWhileIdle" value="true"></property>
		<!-- 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 -->
		<property name="testOnBorrow" value="true"></property>
	</bean>

	<!--sqlsessionFactory 需要注入dateSource -->
	<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 配置数据源 -->
		<property name="dataSource" ref="dataSource"></property>
		<!-- 自动扫描 mybatis的xxxmapper.xml文件，自动注册 -->
		<property name="mapperLocations" value="classpath:dao/*.xml"></property>
		<!-- 指定加载的 mybatis.xml文件（如果需要打印sql日志信息） -->
		<property name="configLocation" value="classpath:mybatis.xml"></property>
	</bean>

	<!-- mybatis集成配置 -->
	<!-- 扫描访问层接口，自动通过spring实例化dao层的实现类 -->
	<bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryBean"></property>
		<!-- 扫描数据访问接口 -->
		<property name="basePackage" value="dao"></property>
	</bean>

	<!--事务管理：声明事务类 -->
	<!-- 事务管理器类 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>


	<!-- 配置声明事务特性 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 事务隔离级别：ISOLATION_DEFAULT相当于ISOLATION_READ_COMMITTED ISOLATION_READ_COMMITTED,推荐使用, 
				ISOLATION_READ_UNCOMMITTED,不推荐，会读取到没有提交的数据, ISOLATION_REPEATABLE_READ,会重复读取到某个查询, 
				ISOLATION_SERIALIZABLE,不推荐，严重影响程序的性能 -->
			<!-- 事务的传播行为：REQUIRED:必须有事务，有则使用原事务，没有则创建新事务 SUPPORTS：如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。 
				MANDATORY：如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。 REQUIRES_NEW:创建一个新的事务，如果当前存在事务，则把当前事务挂起。` 
				NOT_SUPPORTED：以非事务方式运行，如果当前存在事务，则把当前事务挂起 NEVER:以非事务方式运行，如果当前存在事务，则抛出异常。 NESTED:如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于TransactionDefinition.PROPAGATION_REQUIRED。 -->
			<!-- 事务回滚规则：在程序运行时出现的异常才回滚java.lang.RuntimeException -->
			<tx:method name="add*" isolation="DEFAULT" propagation="REQUIRED"
				rollback-for="java.lang.RuntimeException" />
			<tx:method name="update*" isolation="DEFAULT" propagation="REQUIRED"
				rollback-for="java.lang.RuntimeException" />
			<tx:method name="remove*" isolation="DEFAULT" propagation="REQUIRED"
				rollback-for="java.lang.RuntimeException" />
			<tx:method name="find*" isolation="DEFAULT"
				rollback-for="java.lang.RuntimeException" />
		</tx:attributes>
	</tx:advice>

	<!--设置事务切入点 -->
	<aop:config>
		<aop:pointcut expression="execution(* service.impl.*.*(..))"
			id="pointCut" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="pointCut" />
	</aop:config>

	<!--切面扫描 -->
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>

	<!-- 扫描组件 -->
	<context:component-scan base-package="aop,service"></context:component-scan>

</beans>